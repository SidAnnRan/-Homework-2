
#include <iostream>
using namespace std;

//Return remainder from division by two, converted to a bool
bool int2Bool (int m);
/* Decimal to binary conversion
bin is an array of length LEN, and i is the integer that must be converted to a LEN-bit binary number
*/
void dec2Bin (bool bin [], int LEN, int i);
//Print a binary value contained in array bin of length LEN
void printBin (bool bin [], int LEN);
//Input and return a (4-bit) integer (decimal), using C++ unsigned integer semantics for overflow
int inputInt ();
//Given a LEN-bit binary number stored in array bin, return its decimal equivalent
int bin2Dec (bool bin[], int LEN);
int exp2 (int m);

void bAndBin(int dec1, bool bin1[], int dec2, bool bin2[], int LEN) {
    bool resultBin[LEN];
    // Perform bitwise AND on each bit
    for (int i = 0; i < LEN; ++i) {
        resultBin[i] = bin1[i] && bin2[i];
    }

    int resultDec = bin2Dec(resultBin, LEN);

    // Print operands in decimal and their corresponding binary values
    cout << dec1 << " & " << dec2 << " = " << resultDec << "\n";
    cout << "Binary: ";
    printBin(bin1, LEN);
    cout << " & ";
    printBin(bin2, LEN);
    cout << " = ";
    printBin(resultBin, LEN);
    cout << "\n";
}
void bOrBin(int dec1, bool bin1[], int dec2, bool bin2[], int LEN) {
    bool resultBin[LEN];
    // Perform bitwise OR on each bit
    for (int i = 0; i < LEN; ++i) {
        resultBin[i] = bin1[i] || bin2[i];
    }

    int resultDec = bin2Dec(resultBin, LEN);

    // Print operands in decimal and their corresponding binary values
    cout << dec1 << " | " << dec2 << " = " << resultDec << "\n";
    printBin(bin1, LEN);
    cout << " | ";
    printBin(bin2, LEN);
    cout << " = ";
    printBin(resultBin, LEN);
    cout << "\n";
}
void bXorBin(int dec1, bool bin1[], int dec2, bool bin2[], int LEN) {
    bool resultBin[LEN];
    // Perform bitwise XOR on each bit
    for (int i = 0; i < LEN; ++i) {
        resultBin[i] = bin1[i] != bin2[i]; // XOR is true if the bits are different
    }

    int resultDec = bin2Dec(resultBin, LEN);

    // Print operands in decimal and their corresponding binary values
    cout << dec1 << " ^ " << dec2 << " = " << resultDec << "\n";
    printBin(bin1, LEN);
    cout << " ^ ";
    printBin(bin2, LEN);
    cout << " = ";
    printBin(resultBin, LEN);
    cout << "\n";
}
void bNotBin(int dec, bool bin[], int LEN) {
    bool resultBin[LEN];
    for (int i = 0; i < LEN; i++) {
        resultBin[i] = !bin[i];  // Bitwise NOT operation
    }
    int resultDec = bin2Dec(resultBin, LEN);
    cout << "~" << dec << " = " << resultDec << "\n";
    cout << "~";
    printBin(bin, LEN);
    cout << " = ";
    printBin(resultBin, LEN);
    cout << "\n";
}
void lShiftBin(int dec1, bool bin1[], int shift, int LEN) {
    bool resultBin[LEN]; // Declare the array without an initializer
    for (int i = 0; i < LEN; i++) {  // Initialize all elements to false
        resultBin[i] = false;
    }

    // Calculate the effective shift within the 4-bit boundary
    int effectiveShift = shift % LEN;

    // Perform the shift operation
    for (int i = 0; i < LEN; i++) {
        if (i + effectiveShift < LEN) {
            resultBin[i + effectiveShift] = bin1[i];
        }
    }

    // Convert the binary result to decimal
    int resultDec = bin2Dec(resultBin, LEN);

    // Print the result in decimal and binary
    cout << dec1 << " << " << shift << " = " << resultDec << "\n";
    printBin(bin1, LEN);
    cout << " << ";
    printBin(resultBin, LEN);  // Shifted binary
    cout << " = ";
    printBin(resultBin, LEN);  // Resulting binary
    cout << "\n";
}
void rShiftBin(int dec1, bool bin1[], int shift, int LEN) {
    bool resultBin[LEN] = {false}; // Ensure all bits are initialized to false

    // Calculate the effective shift within the 4-bit boundary
    int effectiveShift = shift % LEN;

    // Perform the right shift operation with bit wrapping
    for (int i = 0; i < LEN; i++) {
        int shiftedIndex = (i - effectiveShift + LEN) % LEN;
        resultBin[shiftedIndex] = bin1[i];
    }

    // Convert the binary result to decimal
    int resultDec = bin2Dec(resultBin, LEN);

    // Print the result in decimal and binary
    cout << dec1 << " >> " << shift << " = " << resultDec << "\n";
    printBin(bin1, LEN);
    cout << " >> ";
    printBin(resultBin, LEN);
    cout << " = ";
    printBin(resultBin, LEN);
    cout << "\n";
}
void menu(int dec1, bool bin1[], int dec2, bool bin2[], int LEN) {
    int operation, numChoice;
    do {
        cout << "Bitwise operators menu:\n";
        cout << "1. Bitwise AND (&)\n";
        cout << "2. Bitwise OR (|)\n";
        cout << "3. Bitwise XOR (^)\n";
        cout << "4. Bitwise NOT (~)\n";
        cout << "5. Left Shift (<<)\n";
        cout << "6. Right Shift (>>)\n";
        cout << "7. Addition (+)\n";
        cout << "Choose an op: ";
        cin >> operation;
        
         if (operation < 1 || operation > 7) {
            cout << "Invalid operation. Please select a number between 1 and 7.\n";
        } else if (operation == 4) {  // Bitwise NOT case
            do {
                cout << "Choose the number you want to perform bitwise NOT on, 1 for the first and 2 for the second: ";
                cin >> numChoice;
                if (numChoice == 1) {
                    bNotBin(dec1, bin1, LEN);
                    return;  // Return after performing the operation to avoid falling through
                } else if (numChoice == 2) {
                    bNotBin(dec2, bin2, LEN);
                    return;  // Return after performing the operation to avoid falling through
                } else {
                    cout << "Invalid number choice. Please select 1 or 2.\n";
                }
            } while (numChoice != 1 && numChoice != 2);
        }
    } while (operation < 1 || operation > 7);

    int result = 0;
    switch (operation) {
        case 1:
            bAndBin(dec1, bin1, dec2, bin2, LEN);
            break;
        case 2:
            bOrBin(dec1, bin1, dec2, bin2, LEN);
            break;
        case 3:
            bXorBin(dec1, bin1, dec2, bin2, LEN);
            break;
        case 4:
            result = ~dec1 & 0xF; // Applying NOT only on the first number and ensuring a 4-bit result
            break;
        case 5:
            lShiftBin(dec1, bin1, dec2, LEN); // Left shift and ensuring a 4-bit result
            break;
        case 6:
            rShiftBin(dec1,bin1, dec2, LEN);
            break;
        case 7:
            result = (dec1 + dec2) & 0xF; // Addition with 4-bit overflow
            break;
    }

    bool resultBin[LEN];
    dec2Bin(resultBin, LEN, result);
    cout << "n";
}

int main() {
    const int LEN = 4;
    int dec1 = 0, dec2 = 0;
    bool bin1 [LEN] = {false}, bin2 [LEN] = {false};

    //Set dec1 and dec2 to in-range integers from the user using inputInt
    dec1 = inputInt();
    dec2 = inputInt();

    //Set bin1 and bin2 to binary of dec1 and dec2 using dec2Bin
    dec2Bin(bin1, LEN, dec1);
    dec2Bin(bin2, LEN, dec2);

    //Convert back from binary to decimal
    int dec1a = 0, dec2a = 0;
    //Set dec1a and dec1b to be the decimal of binary values bin1 and bin2 using bin2Dec
    dec1a = bin2Dec(bin1, LEN);
    dec2a = bin2Dec(bin2, LEN);

    cout << "Your numbers in decimal and binary and decimal (converted back from binary) are:\n";
    cout <<"\tDecimal\tBinary\tDecimal Again\n";
    cout << "1.\t" << dec1 << "\t";
    printBin(bin1, LEN);
    cout << "\t" << dec1a;
    cout << "\n";
    cout << "2.\t" << dec2 << "\t";
    printBin(bin2, LEN);
    cout << "\t" << dec2a;
    cout << "\n\n";

    menu(dec1, bin1, dec2, bin2, LEN);

    return 0;
}

int inputInt () {
    int i = 0;
    do {
        cout << "Enter a non-negative number: ";
        cin >> i;
        if (i < 0)
            cout << "Number out of range!\n";
    }while(i < 0);
    
    return i % 16;
}

bool int2Bool (int m) {
    return (m % 2 == 1) ? true : false;
}

void dec2Bin (bool bin [], int LEN, int n) {
    //MSB = bin[3], ..., LSB = bin[0]
    int i = 0;
    while (i < LEN){
        bin[i] = int2Bool(n);
        n /= 2;
        i++;
    }
}

int exp2 (int m) {
    return 1 << m;
}

int bin2Dec (bool bin[], int LEN) {
    int decimal = 0;
    for (int i = 0; i < LEN; ++i) {
        if (bin[i]) {
            decimal += 1 << i;
        }
    }
    return decimal;
}


void printBin (bool bin[], int LEN)
{
    int i = LEN - 1;
    while(i >= 0) {
        cout << bin[i];
        i--;
    }
}
